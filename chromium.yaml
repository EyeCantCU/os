#nolint:git-checkout-must-use-github-updates
# Note: To produce a debug build of Chromium, pass these options to gn:
#  is_debug=true
#  is_official_build=false
#  symbol_level=2
# And remove the use of the strip pipeline below
package:
  name: chromium
  version: 128.0.6613.84
  epoch: 0
  description: "Open souce version of Google's chrome web browser"
  copyright:
    - license: BSD-3-Clause
  resources:
    cpu: 65
    memory: 128Gi
  target-architecture:
    - x86_64
  dependencies:
    runtime:
      - font-opensans
      - gtk-3
      - icu-data-full
      - mesa-dri-gallium
      # explicit depends for --headless
      # XXX: eudev-libs replaced by so:libudev.so.1 to allow installation with libudev-zero
      # take care if libudev.so ever updates somajor..
      - so:libudev.so.1
      - xdg-utils

environment:
  contents:
    packages:
      - alsa-lib-dev
      - bash
      - bison
      - brotli-dev
      - busybox
      - bzip2-dev
      - cairo-dev
      - clang-18-dev
      #- compiler-rt
      - crc32c-dev
      - cups-dev
      - curl-dev
      - dav1d-dev
      - dbus-glib-dev
      #- double-conversion-dev
      - elfutils
      - elfutils-dev
      - eudev-dev
      - ffmpeg-dev
      - findutils
      - flac-dev
      - flatbuffers-dev
      - flex
      - freetype-dev
      - gn
      - gperf
      - gtk-3-dev
      - gzip
      - harfbuzz-dev
      - hunspell-dev
      - hwdata-dev
      - jsoncpp-dev
      - krb5-dev
      - lcms2-dev
      - libbsd-dev
      - libcap-dev
      - libevdev-dev
      - libevent-dev
      - libexif-dev
      - libffi-dev
      - libgcrypt-dev
      - libjpeg-turbo-dev
      - libnss-dev
      - libsecret-dev
      - libusb-dev
      - libva-dev
      - libwebp-dev
      - libxcomposite-dev
      - libxcursor-dev
      - libxinerama-dev
      - libxml2-dev
      - libxrandr-dev
      - libxscrnsaver-dev
      - libxslt-dev
      - linux-headers
      - llvm-18
      - mesa-dev
      - nodejs
      - openh264-dev
      - opus-dev
      - pciutils-dev
      - perl
      #- pipewire-dev
      - posix-libc-utils
      - pulseaudio-dev
      - py3-setuptools
      - python3
      - qt5-qtbase-dev
      - re2-dev
      - rust
      #- rust-bindgen
      - samurai
      - snappy-dev
      - speex-dev
      - spirv-tools-dev
      - sqlite-dev
      - woff2-dev
      - xcb-proto
      - zlib-dev
      - zstd-dev
  environment:
    USE_CCACHE: 1

pipeline:
  - uses: git-checkout
    with:
      # === INFO === Initial git clone: takes ~3 minutes, needs 6GB disk
      repository: https://chromium.googlesource.com/chromium/src.git
      tag: ${{package.version}}
      depth: 1
      expected-commit: 606aa55c7d687518d34b55accc5a71ea0bd28727
      destination: /home/src

  - runs: |
      cd /home/src

      # Remove pre-existing binaries
      scanelf -RA -F "%F" "$builddir" | while read -r elf; do
        rm -f "$elf"
      done

      # https://groups.google.com/a/chromium.org/d/topic/chromium-packagers/9JX1N2nf4PU/discussion
      touch chrome/test/data/webui/i18n_process_css_test.html
      # Use the file at run time instead of effectively compiling it in
      sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
        -i services/device/public/cpp/usb/BUILD.gn

      mkdir -p third_party/node/linux/node-linux-x64/bin
      ln -sv /usr/bin/node third_party/node/linux/node-linux-x64/bin/

      # reusable system library settings
      # highway - requires highway>=1.1.0 (arm failures)
      # libavif - https://github.com/AOMediaCodec/libavif/commit/50a541469c98009016af8dcc9f83a1be79f3a7d9
      # libaom - https://aomedia.googlesource.com/aom/+/706ee36dcc82%5E%21/
      #   but watch this space: https://aomedia-review.googlesource.com/c/aom/+/188606
      # jsoncpp, re2, snappy, swiftshader-*, woff2 - requires use_custom_libcxx=false
      local use_system="
        brotli
        crc32c
        dav1d
        double-conversion
        ffmpeg
        flac
        fontconfig
        freetype
        harfbuzz-ng
        icu
        libdrm
        libevent
        libjpeg
        libsecret
        libusb
        libwebp
        libxml
        libxslt
        openh264
        opus
        zlib
        zstd
        "

      for _lib in $use_system libjpeg_turbo unrar; do
        msg "Removing buildscripts for system provided $_lib"
        _lib="${_lib/swiftshader-/swiftshader/third_party/}"
          find . -type f -path "*third_party/$_lib/*" \
          \! -path "*third_party/$_lib/chromium/*" \
          \! -path "*third_party/$_lib/google/*" \
          \! -path './base/third_party/icu/*' \
          \! -path './third_party/libxml/*' \
          \! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
          \! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
          \! -path './third_party/crashpad/crashpad/third_party/zlib/zlib_crashpad.h' \
          \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
          -delete
      done

      # Replace gn files
      python3 build/linux/unbundle/replace_gn_files.py --system-libraries \
        $use_system
      python3 third_party/libaddressinput/chromium/tools/update-strings.py

      # flatc is used in build workflows since https://crrev.com/c/5595037,
      # but the pre-generated files are still checked-in. remove to make sure
      # they're not used. (if used, they will break builds on version mismatch.)
      # https://github.com/tensorflow/tensorflow/issues/62298
      # find third_party/tflite/ -name '*_generated.h' -delete

      # prevent annoying errors when regenerating gni
      sed -i 's,^update_readme$,#update_readme,' \
        third_party/libvpx/generate_gni.sh

      # allow system dependencies in "official builds"
      sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
        tools/generate_shim_headers/generate_shim_headers.py

      # https://crbug.com/893950
      sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
        third_party/blink/renderer/core/xml/*.cc \
        third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
        third_party/libxml/chromium/*.cc

      #cd /home/src/out/Default

      export CFLAGS="${CFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations -Wno-shift-count-overflow -Wno-ignored-attributes"
      export CXXFLAGS="${CXXFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations -Wno-invalid-constexpr"
      export CPPFLAGS="${CPPFLAGS/-g/} -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="

      # breaks chromium
      export CXXFLAGS="${CXXFLAGS/-D_GLIBCXX_ASSERTIONS=1}"
      export CXXFLAGS="${CXXFLAGS/-fstack-clash-protection}"
      export CFLAGS="${CFLAGS/-fstack-clash-protection}"

      export AR="llvm-ar"
      export CC="clang"
      export CXX="clang++"
      export NM="llvm-nm"

      # Configure build

      # this should be at 0 for -dbg too. change it for local debugging only
      local symbol_level=0

      # this follows compiler-rt, not clang or llvm package
      _llvmver=18

      # shellcheck disable=2089
      local gn_config="
        blink_enable_generated_code_formatting=false
        cc_wrapper=\"ccache\"
        chrome_pgo_phase=0
        clang_base_path=\"/usr/lib/llvm$_llvmver\"
        clang_use_chrome_plugins=false
        clang_version=\"$_llvmver\"
        custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
        disable_fieldtrial_testing_config=true
        enable_hangout_services_extension=true
        enable_nacl=false
        enable_nocompile_tests=false
        enable_stripping=false
        enable_rust=true
        enable_vr=false
        fatal_linker_warnings=false
        ffmpeg_branding=\"Chrome\"
        host_toolchain=\"//build/toolchain/linux/unbundle:default\"
        icu_use_data_file=false
        is_cfi=false
        is_clang=true
        is_component_ffmpeg=true
        is_debug=false
        is_official_build=true
        link_pulseaudio=true
        proprietary_codecs=true
        rtc_link_pipewire=true
        rtc_use_pipewire=true
        rustc_version=\"yes\"
        rust_bindgen_root=\"/usr\"
        rust_sysroot_absolute=\"/usr\"
        safe_browsing_use_unrar=false
        symbol_level=$symbol_level
        treat_warnings_as_errors=false
        use_custom_libcxx=true
        use_lld=true
        use_pulseaudio=true
        use_safe_libstdcxx=false
        use_system_libffi=true
        use_sysroot=false
        use_thin_lto=false
        use_vaapi=true
        v8_enable_maglev=true
        "

      # shellcheck disable=2090,2116
      gn gen out/bld --args="$(echo $gn_config)"

      # final link needs lots of file descriptors
      ulimit -n 4096

      # moc and friends not in path by default
      export PATH="$PATH:/usr/lib/qt5/bin"

      # shellcheck disable=2046
      ninja -C out/bld \
        chrome \
        chrome_sandbox \
        chromedriver.unstripped \
        chrome_crashpad_handler \
        $(want_check && echo base_unittests)

      cd ./out/bld

      mkdir -p ${{targets.destdir}}/usr/bin

      # binaries
      install -Dm755 chrome ${{targets.destdir}}/usr/lib/${{package.name}}/chromium
      # backward compat symlink
      ln -sfv chromium ${{targets.destdir}}/usr/lib/${{package.name}}/chrome
      install -Dm4755 chrome_sandbox ${{targets.destdir}}/usr/lib/${{package.name}}/chrome-sandbox
      install -Dm755 chrome_crashpad_handler -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      # qt5
      install -Dm755 libqt5_shim.so -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      # chromedriver
      install -Dm755 chromedriver.unstripped ${{targets.destdir}}/usr/lib/${{package.name}}/chromedriver
      ln -sfv ../lib/${{package.name}}/chromedriver ${{targets.destdir}}/usr/bin/chromedriver

      # resources
      install -Dm644 snapshot_blob.bin -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      install -Dm644 v8_context_snapshot.bin -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      if [ -f icudtl.dat ]; then
        install -Dm644 icudtl.dat -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      fi

      install -Dm755 xdg-mime -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      install -Dm755 xdg-settings -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      # Vulkan
      install -Dm755 libvulkan.so.1 -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      # Angle
      install -Dm755 libEGL.so -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      install -Dm755 libGLESv2.so -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      install -Dm755 "$srcdir"/chromium-launcher.sh \
        -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      cp -a MEIPreload ${{targets.destdir}}/usr/lib/${{package.name}}/

      # It is important that we name the target "chromium-browser",
      # xdg-utils expect it; bug https://bugs.gentoo.org/355517
      ln -sfv ../lib/${{package.name}}/chromium-launcher.sh ${{targets.destdir}}/usr/bin/chromium-browser
      ln -sfv chromium-browser ${{targets.destdir}}/usr/bin/chromium

      install -Dm644 "$srcdir"/chromium.conf \
        -t ${{targets.destdir}}/etc/chromium/

      for pak in locales/*.pak *.pak; do
        install -Dm644 "$pak" ${{targets.destdir}}/usr/lib/${{package.name}}/"$pak"
      done

      install -Dm755 libvk_swiftshader.so \
        -t ${{targets.destdir}}/usr/lib/${{package.name}}/
      install -Dm755 vk_swiftshader_icd.json \
        -t ${{targets.destdir}}/usr/lib/${{package.name}}/

      #cd /home/build

      for size in 24 48 64 128 256; do
        install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
          "${{targets.destdir}}/usr/share/icons/hicolor/${size}x$size/apps/chromium.png"
      done

      for size in 16 32; do
        install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
          "${{targets.destdir}}/usr/share/icons/hicolor/${size}x$size/apps/chromium.png"
      done

      sed -i \
        -e 's/@@MENUNAME@@/Chromium/g' \
        -e 's/@@PACKAGE@@/chromium/g' \
        -e 's/@@USR_BIN_SYMLINK_NAME@@/chromium-browser/g' \
        chrome/app/resources/manpage.1.in \
        chrome/installer/linux/common/desktop.template

      sed -ni \
        -e 's/chromium-browser\.desktop/chromium.desktop/' \
        -e '/<update_contact>/d' \
        -e '/<p>/N;/<p>\n.*\(We invite\|Chromium supports Vorbis\)/,/<\/p>/d' \
        -e '/^<?xml/,$p' \
        chrome/installer/linux/common/chromium-browser/chromium-browser.appdata.xml

      install -Dm644 chrome/installer/linux/common/desktop.template \
        ${{targets.destdir}}/usr/share/applications/chromium.desktop
      install -Dm644 chrome/app/resources/manpage.1.in \
        ${{targets.destdir}}/usr/share/man/man1/chromium.1
      install -Dm644 chrome/installer/linux/common/chromium-browser/chromium-browser.appdata.xml \
        ${{targets.destdir}}/usr/share/metainfo/chromium.appdata.xml

subpackages:
  - name: chromium-qt5
    description: "Chromium qt5 shim"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/lib/${{package.name}}
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/libqt5_shim.so ${{targets.contextdir}}/usr/lib/${{package.name}}/libqt5_shim.so

  - name: chromium-chromedriver
    description: "WebDriver driver for Chromium"
    dependencies:
      runtime:
        - chromium
    pipeline:
      - runs: |
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/chromedriver ${{targets.contextdir}}/usr/lib/${{package.name}}/chromedriver
          mv ${{targets.destdir}}/usr/bin/chromedriver ${{targets.contextdir}}/usr/bin/chromedriver

  #- name: ${{}}-doc
    #description: "Documentation for Chromium"
    #pipeline:
      #- runs: |

  - name: ${{package.name}}-lang
    description: "Languages for Chromium"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/lib/${{package.name}}/locales
          # Default to en-us and provide everything else through the chromium-lang package
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/locales/*.pak ${{targets.contextdir}}/usr/lib/${{package.name}}/locales/
          mv ${{targets.contextdir}}/usr/lib/${{package.name}}/locales/en-US.pak ${{targets.destdir}}/usr/lib/${{package.name}}/locales/

  - name: ${{package.name}}-swiftshader
    description: "Chromium web browser: CPU-based implementation of the Vulkan graphics API"
    dependencies:
      runtime:
        - chromium
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/lib/${{package.name}}
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/libvk_swiftshader.so ${{targets.contextdir}}/usr/lib/${{package.name}}/libvk_swiftshader.so
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/vk_swiftshader_icd.json ${{targets.contextdir}}/usr/lib/${{package.name}}/vk_swiftshader_icd.json
